"""
2. ADD TWO NUMBERS
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
"""

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        sum = self.convertListToInt(l1) + self.convertListToInt(l2) # add lists together
        return self.convertIntToList(sum) # convert sum back into reversed linked list and return
        
    # Function to convert a reversed linked list into an int
    def convertListToInt(self, list):
        num = 0 # converted num of list
        multiplier = 1 # controls how the place of the digit in list corresponds to converted num

        while list is not None:
            num += list.val * multiplier # add digit of list to num
            list = list.next
            multiplier *= 10 # digit is carried to the corresponding place
            
        return num # return list converted into an int num
    
    # Function to convert an int into a reversed linked list
    def convertIntToList(self, num):
        prev = -1 # we are ensured lists will hold non-negative ints
        head = -1 # the head of the linked list that we will return
        
        # Convert num to str and iterate through each char to add to list\
        for digit in reversed(str(num)): 
            curr = ListNode(digit) # current node
            if prev > -1: # as long as we arent touching the head of the list
                curr = ListNode(digit)
                prev.next = curr # link the previous node to the current
            else: # save the front of the linked list in head
                head = curr
            
            prev = curr # save the previous node
        
        return head
