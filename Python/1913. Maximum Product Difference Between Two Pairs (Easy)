"""
1913. MAXIMUM PRODUCT DIFFERENCE BETWEEN TWO PAIRS

The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).

For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
Given an integer array nums, choose four distinct indices w, x, y, and z such that the product 
difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.

Return the maximum such product difference.
"""

class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        """
        # Approach 1 using max() and min()
        
        # Temporary values to *= 
        largerProduct = 1
        smallerProduct = 1
        
        # perform it twice since we need two products for the difference
        for _ in range(2):
            largest = max(nums) # largest number in nums
            smallest = min(nums) # smallest number in nums
            
            # Remove from nums so max()/min() will get next largest or smallest
            nums.remove(largest) 
            nums.remove(smallest)
            
            largerProduct *= largest
            smallerProduct *= smallest
        
        return largerProduct - smallerProduct
        """
        
        
        # Approach 2 using sort()
        nums.sort() # sort from small to large
        
        # Maximize product difference by subtracting smallest product possible from largest product possible
        return nums[len(nums) - 1]*nums[len(nums) - 2] - nums[0]*nums[1]
    
